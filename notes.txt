
# supervisord runs fastmage and cleanbook
# config:

[include]
files = *.supervisor

[supervisord]

[supervisorctl]
serverurl = unix://supervisord.sock

[unix_http_server]
file = supervisord.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

#[program:main]                                                                                                                                                               
#process_name = main-%(process_num)s                                                                                                                                          
#command = python /srv/www/domain.com/tornado-linode/main.py                                                                                                                  
# --port=%(process_num)s                                                                                                                                                      
# --log_file_prefix=%(here)s/logs/%(program_name)s-%(process_num)s.log                                                                                                        
#numprocs = 4                                                                                                                                                                 
#numprocs_start = 8000                                                                                                                                                        

[program:fastmage]
process_name = fastmage-%(process_num)s
command = python /srv/www/domain.com/fastmage/fastmage.py
  --port=%(process_num)s
  --log_file_prefix=%(here)s/logs/%(program_name)s-%(process_num)s.log
numprocs = 4
numprocs_start = 8010

[program:cleanbook]
process_name = cleanbook-%(process_num)s
command = python /srv/www/domain.com/grafatality/cleanbook.py
  --port=%(process_num)s
  --log_file_prefix=%(here)s/logs/%(program_name)s-%(process_num)s.log
numprocs = 4
numprocs_start = 8000

nginx config:
user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    # Enumerate all the Tornado servers here                                                                                                                                  
    upstream frontend {
    server 127.0.0.1:8000;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
    }
    upstream images {
        server 127.0.0.1:8010;
        server 127.0.0.1:8011;
        server 127.0.0.1:8012;
        server 127.0.0.1:8013;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/html text/css text/xml
           application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout                                                                                                            
    # on the Tornado server (to avoid propagating "queries of death"                                                                                                          
    # to all frontends)                                                                                                                                                       
    proxy_next_upstream error;

    server {
    listen 7999;

    # Allow file uploads                                                                                                                                                  
        client_max_body_size 50M;

        location static/ {
            root /srv/www/domain.com/grafatality/;
            if ($query_string) {
                expires max;
            }
        }
        location = /favicon.ico {
            rewrite (.*) /static/favicon.ico;
        }
        location = /robots.txt {
            rewrite (.*) /static/robots.txt;
        }

        location /images {
            proxy_pass http://images;
        }

        location / {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://frontend;
        }
    }
}
